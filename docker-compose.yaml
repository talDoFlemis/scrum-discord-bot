services:
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    networks:
      - backend
    volumes:
      - mongo-data:/data/db

  otel-collector:
    image: otel/opentelemetry-collector:0.86.0
    command: ["--config=/etc/otel-collector.yaml"]
    ports:
      - "4317:4317"
    volumes:
      - ./deploy/otel-collector.yaml:/etc/otel-collector.yaml
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - observability

  prometheus:
    image: prom/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--web.enable-remote-write-receiver"
      - "--enable-feature=exemplar-storage"
      - "--enable-feature=native-histograms"
    ports:
      - "9090:9090"
    networks:
      - observability
      - backend
    volumes:
      - ./deploy/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prom-data:/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:9090
      interval: 10s
      timeout: 15s
      retries: 5
      start_period: 10s

  grafana:
    image: grafana/grafana
    ports:
      - 3002:3000
    networks:
      - observability
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - ./deploy/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 10s
      retries: 5
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy

  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./deploy/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3200/ready | grep -q -w ready || exit 1
      start_period: 20s
      interval: 10s
      timeout: 1s
      retries: 5
    networks:
      - observability

  loki:
    image: grafana/loki:3.1.0
    volumes:
      - ./deployments/loki/config.yaml:/etc/loki/loki-config.yaml
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1
      start_period: 10s
      interval: 10s
      timeout: 1s
      retries: 5
    networks:
      - observability

networks:
  observability:
  backend:

volumes:
  prom-data:
  tempo-data:
  grafana-data:
  loki-data:
  mongo-data:
